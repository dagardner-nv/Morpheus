HTTP/1.1 200 OK
Content-Type: application/octet-stream
{{#inject}}(()=>{

    // Check for the shared state object
    if (!this.Handlebars._nv_morpheus === undefined){
        throw "Must call `POST /reset` endpoint before calling other methods!";
    }

    const counter = this.Handlebars._nv_morpheus.get_and_increment();
    const filename = "payloads/sid/sid_infer_resp." + counter + ".body"

    logger.info(`Returning payload for counter: ${counter}, and filename: ${filename}`);

    let inf_header_content_length = 157;
    if (counter === 63) {
        inf_header_content_length = 156;
    }

    // This seems like the only way to pass a variable to the file helper
    request._nv_morpheus_params = {
        counter,
        filename
    };

    // console.log(`Request ID: ${request_id}`);

    // // this.counter+=1;
    // let filename = "payloads/sid/sid_infer_resp." + request_id + ".body"

    // let inf_header_content_length = 155;
    // if (request_id > 1) {
    //     inf_header_content_length = 153;
    // }

    // // This seems like the only way to pass a variable to the file helper
    // request._nv_morpheus_params = {counter: request_id, filename: filename};

    // console.log(`Responding with file: ${filename}`);


    // let contents = fs.readFileSync(filename);

    // // return JSON.stringify({inside: true});
    // return {
    //     status: 200,
    //     headers: {
    //         'Inference-Header-Content-Length': inf_header_content_length
    //     },
    //     body: contents.toString()
    // };

    return await this.Handlebars.Promise((resolve, reject) => {
        console.log("In promise");

        let body = [];
        request.on('data', (chunk) => {
            body.push(chunk);
            console.log("Got data");
        }).on('end', () => {
            body = Buffer.concat(body).toString();
            // at this point, `body` has the entire request body stored in it as a string

            console.log("data end");
            resolve(body);
        });
    }).then((body) => {

        const json_length = parseInt(request.get("inference-header-content-length"));

        console.log(`JSON length: ${json_length}`);

        var body = JSON.parse(body.slice(0, json_length));

        console.log(body);

        // console.log(body);

        // console.log(context.data.root.request_id);

        // if (context.data.root.request_id.length === 0){
        //     return {
        //         status: 401,
        //         body: `{
        //             error: "Unable to find request id"
        //         }`
        //     };
        // }

        let request_id = parseInt(body.id) + 1;

        console.log(`Request ID: ${request_id}`);

        // this.counter+=1;
        let filename = "payloads/sid/sid_infer_resp." + request_id + ".body"

        let inf_header_content_length = 157;
        if (this.counter === 63) {
            inf_header_content_length = 156;
        }

        // This seems like the only way to pass a variable to the file helper
        request._nv_morpheus_params = {counter: request_id, filename: filename};

        console.log(`Responding with file: ${filename}`);


        let contents = fs.readFileSync(filename);

        // return JSON.stringify({inside: true});
        return {
            status: 200,
            headers: {
                'Inference-Header-Content-Length': inf_header_content_length
            },
            body: contents.toString()
        };
    });
})();{{/async_code}}
